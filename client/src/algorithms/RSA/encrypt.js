import { generateKeyPair } from "./utils/generateKeyPair";
import { modPow } from "./utils/getBigIntNum";

export function encrypting() {
  const keys = generateKeyPair(); //! –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –æ—Ç–∫—Ä—ã—Ç—ã–π –∫–ª—é—á —é–∑–µ—Ä–∞ —Å –∫–æ—Ç–æ—Ä—ã–º –º—ã –æ–±—â–∞–µ–º—Å—è –ø—Ä–∏ –ø–æ–º–æ—â–∏ axios –∑–∞–ø—Ä–æ—Å–∞
  //! –¥–æ–±–∞–≤–∏—Ç—å axios –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —á–µ—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è


  let message = "–ø—Ä–∏–≤–µ—Ç –º–∏—Ä hüöÄ"; //* —Å–º–∞–π–ª–∏–∫ —É–≥–∞—Ä–Ω—ã —Å–æ–≥–ª–∞—Å–∏—Ç–µ—Å—å, –Ω—É–∂–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ unicode'–∞

  function string2BigInt(m) {
    let result = "";
    for (let i = 0; i < m.length; i++) {
        // Use `codePointAt` to handle characters that may use more than one UTF-16 code unit.
        let codePoint = m.codePointAt(i);
        result += codePoint.toString(16).padStart(8, '0');
        // If it's a surrogate pair, skip the next code unit
        if (codePoint > 0xFFFF) {
            i++;
        }
    }
    return BigInt("0x" + result);
}

  let bigIntMessage = string2BigInt(message);

  let pubExp = keys.publicKey.e;
  let module = keys.publicKey.n;

  let encryptMessage = modPow(bigIntMessage, pubExp, module);
  return {encryptMessage, keys};

}